// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  nickname  String
  image     String?
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product Product[]
  article Article[]
  comment Comment[]
  isLiked Like[]
}

model Product {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  price       Float
  tags        String[]
  imageUrl    String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  comments    Comment[]
  isLiked     Like[]

  userId Int?
  user   User? @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Article {
  id        Int       @id @default(autoincrement())
  title     String
  content   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  comments  Comment[]
  isLiked   Like[]

  userId Int?
  user   User? @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())

  userId    Int?
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  articleId Int?
  article   Article? @relation(fields: [articleId], references: [id], onDelete: Cascade)
  productId Int?
  product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Like {
  id Int @id @default(autoincrement())

  userId    Int?
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  articleId Int?
  article   Article? @relation(fields: [articleId], references: [id], onDelete: Cascade)
  productId Int?
  product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade)

  // 중복 좋아요 방지를 위한 복합 유니크 제약조건
  @@unique([userId, articleId], name: "unique_user_article_like")
  @@unique([userId, productId], name: "unique_user_product_like")
}
